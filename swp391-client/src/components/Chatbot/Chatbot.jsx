import React, { useState, useRef, useEffect } from 'react';

import './Chatbot.css';

// Icon Components
const ChatbotIcon = ({ className }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <path d="M12 2C6.48 2 2 6.48 2 12c0 2.85 1.2 5.41 3.11 7.24L3 23l3.76-2.11C8.59 22.8 10.24 23 12 23c5.52 0 10-4.48 10-10S17.52 2 12 2zm-1 15h-2v-2h2v2zm0-4h-2V9h2v4z"/>
  </svg>
);

const SendIcon = ({ className }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
  </svg>
);

const CloseIcon = ({ className }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
  </svg>
);

const RobotIcon = ({ className }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <path d="M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm7 19h-2v-2c0-2.8-2.2-5-5-5s-5 2.2-5 5v2H5v-2c0-3.9 3.1-7 7-7s7 3.1 7 7v2zM8 11h8v2H8v-2zm2-4h4v2h-4V7z"/>
  </svg>
);

const UserIcon = ({ className }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
  </svg>
);

const GlobeIcon = ({ className }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z"/>
  </svg>
);

const ConversationalChatbot = () => {

import { FaComments, FaTimes, FaPaperPlane, FaRobot, FaUser, FaGlobe } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom'; // Th√™m import
import './Chatbot.css';

const Chatbot = () => {
  const navigate = useNavigate(); // Th√™m hook
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [language, setLanguage] = useState('vi');
  const messagesEndRef = useRef(null);

  // Auto scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Welcome message when chatbot opens
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMsg = {
        id: 1,
        text: language === 'vi' 
          ? "Xin ch√†o! T√¥i l√† AI Assistant c·ªßa WeHope - h·ªá th·ªëng h·ªó tr·ª£ ph√≤ng ch·ªëng ma t√∫y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c bi·ªán ph√°p ph√≤ng ng·ª´a, t√°c h·∫°i c·ªßa ma t√∫y, ho·∫∑c h·ªó tr·ª£ t∆∞ v·∫•n. B·∫°n c√≥ c√¢u h·ªèi g√¨ mu·ªën th·∫£o lu·∫≠n kh√¥ng?"
          : "Hello! I'm WeHope's AI Assistant - a drug prevention support system. I can help you learn about prevention measures, drug-related harms, or provide consultation support. What would you like to discuss?",
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages([welcomeMsg]);
    }
  }, [isOpen, language]);

  // Function to call Claude API for natural AI conversation
  const getAIResponse = async (userMessage, conversationHistory) => {
    try {
      const systemPrompt = language === 'vi' 
        ? `B·∫°n l√† m·ªôt AI Assistant chuy√™n v·ªÅ lƒ©nh v·ª±c ph√≤ng ch·ªëng ma t√∫y, thu·ªôc h·ªá th·ªëng WeHope - Drug Use Prevention Support System.


TH√îNG TIN V·ªÄ WEHOPE:
- H·ªá th·ªëng h·ªó tr·ª£ ph√≤ng ch·ªëng s·ª≠ d·ª•ng ma t√∫y
- Cung c·∫•p c√°c t√≠nh nƒÉng: kh·∫£o s√°t ƒë√°nh gi√°, t∆∞ v·∫•n tr·ª±c tuy·∫øn, kh√≥a h·ªçc gi√°o d·ª•c, tin t·ª©c c·∫≠p nh·∫≠t
- M·ª•c ti√™u: Gi√∫p c·ªông ƒë·ªìng c√≥ ki·∫øn th·ª©c v√† k·ªπ nƒÉng ph√≤ng ch·ªëng t·ªá n·∫°n x√£ h·ªôi

VAI TR√í C·ª¶A B·∫†N:
- L√† m·ªôt AI assistant th√¥ng minh, c√≥ ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ ph√≤ng ch·ªëng ma t√∫y
- Cung c·∫•p th√¥ng tin ch√≠nh x√°c, khoa h·ªçc v·ªÅ t√°c h·∫°i c·ªßa ma t√∫y
- H·ªó tr·ª£ t∆∞ v·∫•n c√°c bi·ªán ph√°p ph√≤ng ng·ª´a ph√π h·ª£p
- L·∫Øng nghe v√† ƒë∆∞a ra l·ªùi khuy√™n t√≠ch c·ª±c, x√¢y d·ª±ng
- C√≥ th·ªÉ th·∫£o lu·∫≠n v·ªÅ c√°c ch·ªß ƒë·ªÅ li√™n quan: t√¢m l√Ω h·ªçc, x√£ h·ªôi h·ªçc, y h·ªçc

C√ÅCH PH·∫¢N H·ªíI:
- Tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n nh∆∞ m·ªôt AI th√¥ng minh
- S·ª≠ d·ª•ng ki·∫øn th·ª©c chuy√™n m√¥n ƒë·ªÉ gi·∫£i th√≠ch r√µ r√†ng
- C√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi ph·∫£n bi·ªán ƒë·ªÉ hi·ªÉu r√µ h∆°n v·∫•n ƒë·ªÅ
- ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø, c√≥ th·ªÉ √°p d·ª•ng
- Khuy·∫øn kh√≠ch s·ª± t√≠ch c·ª±c v√† hy v·ªçng
- Kh√¥ng gi·∫£ v·ªù l√† con ng∆∞·ªùi, th·ª´a nh·∫≠n m√¨nh l√† AI khi ƒë∆∞·ª£c h·ªèi

H√£y tr·∫£ l·ªùi m·ªôt c√°ch chuy√™n nghi·ªáp v√† h·ªØu √≠ch.`
        : `You are an AI Assistant specializing in drug prevention, part of the WeHope - Drug Use Prevention Support System.

ABOUT WEHOPE:
- Drug use prevention support system
- Provides features: assessment surveys, online consultation, educational courses, news updates
- Goal: Help the community gain knowledge and skills to prevent social evils

YOUR ROLE:
- An intelligent AI assistant with deep knowledge about drug prevention
- Provide accurate, scientific information about drug-related harms
- Support consultation on appropriate prevention measures
- Listen and provide positive, constructive advice
- Can discuss related topics: psychology, sociology, medicine

HOW TO RESPOND:
- Reply naturally as an intelligent AI
- Use professional knowledge to explain clearly
- Can ask counter-questions to better understand issues
- Provide practical, applicable advice
- Encourage positivity and hope
- Don't pretend to be human, acknowledge being AI when asked

Please respond professionally and helpfully.`;

      // Create conversation context from chat history
      const conversationContext = conversationHistory
        .slice(-8) // Take last 8 messages for context
        .map(msg => ({
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.text
        }));

      const response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 1000,
          messages: [
            ...conversationContext,
            { role: "user", content: userMessage }
          ],
          system: systemPrompt

  // Thay th·∫ø h√†m getAIResponse trong component Chatbot c·ªßa b·∫°n
  const getAIResponse = async (userMessage) => {
    const lowerMsg = userMessage.toLowerCase();

    // 1. Course-related queries
    if (lowerMsg.includes('course') || lowerMsg.includes('kh√≥a h·ªçc') || lowerMsg.includes('courses')) {
      try {
        const courses = await fetchCourses();
        if (courses.length > 0) {
          const courseList = courses.slice(0, 3).map(course => {
            const courseId = course.course_id || course.id;
            const courseName = course.course_name || course.title;
            const ageGroup = course.age_group || 'All ages';
            const version = course.version || course.course_version || '1.0';
            const encodedName = encodeURIComponent(courseName);

            // URL v·ªõi ƒë·∫ßy ƒë·ªß params ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông
            const courseUrl = `${window.location.origin}/courses/${courseId}?version=${version}&name=${encodedName}`;

            return `‚Ä¢ ${courseName} (${ageGroup})\n  üîó ${courseUrl}`;
          }).join('\n\n');

          return language === 'en'
            ? `Here are some available courses:\n\n${courseList}\n\nClick on the links above to view course details directly.`
            : `ƒê√¢y l√† m·ªôt s·ªë kh√≥a h·ªçc c√≥ s·∫µn:\n\n${courseList}\n\nB·∫•m v√†o c√°c li√™n k·∫øt tr√™n ƒë·ªÉ xem chi ti·∫øt kh√≥a h·ªçc.`;
        }
      } catch (error) {
        return language === 'en'
          ? "I can help you find courses about drug prevention. Please visit our Courses page to see all available options."
          : "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m kh√≥a h·ªçc v·ªÅ ph√≤ng ch·ªëng ma t√∫y. Vui l√≤ng truy c·∫≠p trang Kh√≥a h·ªçc ƒë·ªÉ xem t·∫•t c·∫£ l·ª±a ch·ªçn.";
      }
    }

    // 2. Appointment booking
    if (lowerMsg.includes('appointment') || lowerMsg.includes('book') || lowerMsg.includes('ƒë·∫∑t l·ªãch') || lowerMsg.includes('t∆∞ v·∫•n')) {
      if (lowerMsg.includes('today') || lowerMsg.includes('h√¥m nay')) {
        try {
          const today = new Date().toISOString().split('T')[0];
          const timeSlots = await fetchAvailableTimeSlots(today);

          if (timeSlots.length > 0) {
            const slots = timeSlots.slice(0, 3).join(', ');
            return language === 'en'
              ? `Available time slots for today: ${slots}. To book an appointment, please visit our Consultation page or tell me your preferred time.`
              : `C√°c khung gi·ªù c√≥ s·∫µn h√¥m nay: ${slots}. ƒê·ªÉ ƒë·∫∑t l·ªãch h·∫πn, vui l√≤ng truy c·∫≠p trang T∆∞ v·∫•n ho·∫∑c cho t√¥i bi·∫øt th·ªùi gian b·∫°n mu·ªën.`;
          } else {
            return language === 'en'
              ? "No available slots for today. Would you like to check tomorrow or another date?"
              : "Kh√¥ng c√≥ khung gi·ªù n√†o tr·ªëng h√¥m nay. B·∫°n c√≥ mu·ªën ki·ªÉm tra ng√†y mai ho·∫∑c ng√†y kh√°c kh√¥ng?";
          }
        } catch (error) {
          return language === 'en'
            ? "I can help you book a consultation appointment. Please visit our Consultation page for real-time availability."
            : "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t l·ªãch t∆∞ v·∫•n. Vui l√≤ng truy c·∫≠p trang T∆∞ v·∫•n ƒë·ªÉ xem l·ªãch tr·ªëng theo th·ªùi gian th·ª±c.";
        }
      }

      return language === 'en'
        ? "I can help you schedule a consultation appointment. What date would you prefer? You can also visit our Consultation page to see all available time slots."
        : "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t l·ªãch t∆∞ v·∫•n. B·∫°n mu·ªën ƒë·∫∑t v√†o ng√†y n√†o? B·∫°n c≈©ng c√≥ th·ªÉ truy c·∫≠p trang T∆∞ v·∫•n ƒë·ªÉ xem t·∫•t c·∫£ khung gi·ªù tr·ªëng.";
    }

    // 3. Specific course info
    if (lowerMsg.includes('teenager') || lowerMsg.includes('young adult') || lowerMsg.includes('adult') ||
      lowerMsg.includes('thanh thi·∫øu ni√™n') || lowerMsg.includes('ng∆∞·ªùi tr·∫ª') || lowerMsg.includes('ng∆∞·ªùi l·ªõn')) {
      try {
        const courses = await fetchCourses();
        const ageGroup = lowerMsg.includes('teenager') || lowerMsg.includes('thanh thi·∫øu ni√™n') ? 'Teenagers' :
          lowerMsg.includes('young') || lowerMsg.includes('ng∆∞·ªùi tr·∫ª') ? 'Young Adult' : 'Adult';

        const filteredCourses = courses.filter(course => course.age_group === ageGroup);

        if (filteredCourses.length > 0) {
          const courseList = filteredCourses.slice(0, 2).map(course => {
            const courseId = course.course_id || course.id;
            const courseName = course.course_name || course.title;
            const courseUrl = `${window.location.origin}/courses/${courseId}`;

            return `‚Ä¢ ${courseName}\n  üîó ${courseUrl}`;
          }).join('\n\n');

          return language === 'en'
            ? `Courses for ${ageGroup}:\n\n${courseList}\n\nThese courses are specifically designed for your age group with relevant content and examples.`
            : `Kh√≥a h·ªçc cho ${ageGroup === 'Teenagers' ? 'thanh thi·∫øu ni√™n' : ageGroup === 'Young Adult' ? 'ng∆∞·ªùi tr·∫ª' : 'ng∆∞·ªùi l·ªõn'}:\n\n${courseList}\n\nC√°c kh√≥a h·ªçc n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho ƒë·ªô tu·ªïi c·ªßa b·∫°n v·ªõi n·ªôi dung v√† v√≠ d·ª• ph√π h·ª£p.`;
        }
      } catch (error) {
        // Fallback to default response
      }
    }

    // 4. Help with navigation
    if (lowerMsg.includes('how to') || lowerMsg.includes('navigate') || lowerMsg.includes('l√†m th·∫ø n√†o')) {
      return language === 'en'
        ? "I can help you navigate our system:\n‚Ä¢ Take surveys to assess your knowledge\n‚Ä¢ Browse educational courses\n‚Ä¢ Book consultation appointments\n‚Ä¢ Read latest news and blogs\n\nWhat would you like to do first?"
        : "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n s·ª≠ d·ª•ng h·ªá th·ªëng:\n‚Ä¢ L√†m kh·∫£o s√°t ƒë·ªÉ ƒë√°nh gi√° ki·∫øn th·ª©c\n‚Ä¢ Xem c√°c kh√≥a h·ªçc gi√°o d·ª•c\n‚Ä¢ ƒê·∫∑t l·ªãch t∆∞ v·∫•n\n‚Ä¢ ƒê·ªçc tin t·ª©c v√† blog m·ªõi nh·∫•t\n\nB·∫°n mu·ªën l√†m g√¨ tr∆∞·ªõc?";
    }

    // 5. Continue with existing project features...
    if (lowerMsg.includes('survey') || lowerMsg.includes('kh·∫£o s√°t')) {
      return language === 'en'
        ? "Our survey feature helps you assess your knowledge and risk factors related to drug use. It's completely anonymous and provides personalized recommendations. Would you like me to guide you to the survey page?"
        : "Ch·ª©c nƒÉng kh·∫£o s√°t gi√∫p b·∫°n ƒë√°nh gi√° ki·∫øn th·ª©c v√† y·∫øu t·ªë nguy c∆° li√™n quan ƒë·∫øn ma t√∫y. Ho√†n to√†n ·∫©n danh v√† cung c·∫•p khuy·∫øn ngh·ªã c√° nh√¢n h√≥a. B·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n ƒë·∫øn trang kh·∫£o s√°t kh√¥ng?";
    }

    // 6. Continue with Gemini AI for general drug prevention questions...
    try {
      const systemPrompt = language === 'en'
        ? `You are WeHope AI Assistant with access to real-time system data. You can help users with:

SYSTEM CAPABILITIES:
- Course information: We have courses for different age groups (Teenagers, Young Adults, Adults)
- Appointment booking: Users can schedule consultations with experts
- Survey system: Anonymous assessments with personalized feedback
- Educational resources: Latest news, blogs, and prevention materials

REAL-TIME FEATURES:
- Check available consultation time slots
- Browse course catalog by age group
- Access survey results and recommendations
- Get latest updates on drug prevention

Answer questions about drug prevention, our system features, and guide users to relevant pages. Keep responses helpful and under 150 words.

USER QUESTION: `
        : `B·∫°n l√† WeHope AI Assistant c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu h·ªá th·ªëng th·ªùi gian th·ª±c. B·∫°n c√≥ th·ªÉ gi√∫p ng∆∞·ªùi d√πng:

KH·∫¢ NƒÇNG H·ªÜ TH·ªêNG:
- Th√¥ng tin kh√≥a h·ªçc: Ch√∫ng t√¥i c√≥ kh√≥a h·ªçc cho c√°c nh√≥m tu·ªïi kh√°c nhau (Thanh thi·∫øu ni√™n, Ng∆∞·ªùi tr·∫ª, Ng∆∞·ªùi l·ªõn)
- ƒê·∫∑t l·ªãch h·∫πn: Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n v·ªõi chuy√™n gia
- H·ªá th·ªëng kh·∫£o s√°t: ƒê√°nh gi√° ·∫©n danh v·ªõi ph·∫£n h·ªìi c√° nh√¢n h√≥a
- T√†i nguy√™n gi√°o d·ª•c: Tin t·ª©c, blog v√† t√†i li·ªáu ph√≤ng ng·ª´a m·ªõi nh·∫•t

T√çNH NƒÇNG TH·ªúI GIAN TH·ª∞C:
- Ki·ªÉm tra khung gi·ªù t∆∞ v·∫•n c√≥ s·∫µn
- Xem danh m·ª•c kh√≥a h·ªçc theo nh√≥m tu·ªïi
- Truy c·∫≠p k·∫øt qu·∫£ kh·∫£o s√°t v√† khuy·∫øn ngh·ªã
- Nh·∫≠n c·∫≠p nh·∫≠t m·ªõi nh·∫•t v·ªÅ ph√≤ng ch·ªëng ma t√∫y

Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ ph√≤ng ch·ªëng ma t√∫y, t√≠nh nƒÉng h·ªá th·ªëng v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ƒë·∫øn trang ph√π h·ª£p. Gi·ªØ c√¢u tr·∫£ l·ªùi h·ªØu √≠ch v√† d∆∞·ªõi 150 t·ª´.

C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG: `;

      // Continue with Gemini API call...
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${import.meta.env.VITE_GEMINI_API_KEY}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: systemPrompt + userMessage }] }],
          generationConfig: {
            maxOutputTokens: 150,
            temperature: 0.7,
            topP: 0.8,
            topK: 40
          },
          safetySettings: [
            { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
            { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
            { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
            { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" }
          ]

        })
      });

      if (response.ok) {
        const data = await response.json();

        return data.content[0].text;
      } else {
        throw new Error('Claude API not available');
      }
    } catch (error) {
      console.log('Claude API Error:', error);
      return getEmergencyResponse(userMessage);

        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
          return data.candidates[0].content.parts[0].text.trim();
        }
      }
    } catch (error) {
      console.log('Gemini AI Error:', error.message);

    }

    // Fallback responses...
    const responses = fallbackResponses[language];
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('xin ch√†o')) {
      return responses.greetings[Math.floor(Math.random() * responses.greetings.length)];
    }

    return responses.default[Math.floor(Math.random() * responses.default.length)];
  };

  // Emergency response when API is not working
  const getEmergencyResponse = (userMessage) => {
    const responses = language === 'vi' ? [
      "Xin l·ªói, hi·ªán t·∫°i t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t v·ªÅ ph√≤ng ch·ªëng ma t√∫y, b·∫°n c√≥ th·ªÉ truy c·∫≠p tr·ª±c ti·∫øp website WeHope ho·∫∑c li√™n h·ªá v·ªõi ƒë·ªôi ng≈© t∆∞ v·∫•n c·ªßa ch√∫ng t√¥i.",
      "T√¥i ƒëang trong qu√° tr√¨nh kh√¥i ph·ª•c h·ªá th·ªëng. Trong th·ªùi gian n√†y, b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu th√™m th√¥ng tin v·ªÅ d·ª± √°n WeHope v√† c√°c kh√≥a h·ªçc ph√≤ng ch·ªëng ma t√∫y tr√™n website ch√≠nh th·ª©c.",
      "R·∫•t ti·∫øc, k·∫øt n·ªëi c·ªßa t√¥i hi·ªán ƒëang b·ªã gi√°n ƒëo·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi team WeHope ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ k·ªãp th·ªùi."
    ] : [
      "I apologize, but I'm currently experiencing technical difficulties. For the best support regarding drug prevention, you can visit the WeHope website directly or contact our consultation team.",
      "I'm in the process of system recovery. During this time, you can learn more about the WeHope project and drug prevention courses on our official website.",
      "Unfortunately, my connection is currently interrupted. You can try again later or contact the WeHope team directly for timely support."
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      text: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInputMessage('');
    setIsTyping(true);

    try {

      // Send entire conversation history for AI context
      const aiResponseText = await getAIResponse(inputMessage, newMessages);
      

      // G·ªçi AI th·ª±c th·ª•
      const aiResponseText = await getAIResponse(inputMessage);


      const aiResponse = {
        id: messages.length + 2,
        text: aiResponseText,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('Error getting AI response:', error);


      // Fallback response n·∫øu c√≥ l·ªói
      const fallbackText = language === 'en'
        ? "I'm having trouble connecting to my AI service right now. Please try again in a moment, or feel free to ask me about drug prevention topics."
        : "T√¥i ƒëang g·∫∑p kh√≥ khƒÉn k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau, ho·∫∑c h·ªèi t√¥i v·ªÅ c√°c ch·ªß ƒë·ªÅ ph√≤ng ch·ªëng ma t√∫y.";


      const fallbackResponse = {
        id: messages.length + 2,
        text: getEmergencyResponse(inputMessage),
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, fallbackResponse]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleLanguage = () => {
    const newLang = language === 'vi' ? 'en' : 'vi';
    setLanguage(newLang);
    setMessages([]); // Clear messages when changing language
  };

  const handleQuickAction = (action) => {
    const actionMessages = {
      courses: language === 'en' ? 'Show me available courses' : 'Hi·ªÉn th·ªã c√°c kh√≥a h·ªçc c√≥ s·∫µn',
      appointment: language === 'en' ? 'I want to book a consultation' : 'T√¥i mu·ªën ƒë·∫∑t l·ªãch t∆∞ v·∫•n',
      survey: language === 'en' ? 'Tell me about the survey' : 'Cho t√¥i bi·∫øt v·ªÅ kh·∫£o s√°t'
    };

    setInputMessage(actionMessages[action]);
    handleSendMessage();
  };

  // API functions
  const fetchCourses = async () => {
    try {
      console.log('Fetching courses from:', `${import.meta.env.VITE_API_URL}/course/get-all-course`);
      const response = await fetch(`${import.meta.env.VITE_API_URL}/course/get-all-course`);
      console.log('Response status:', response.status);

      const data = await response.json();
      console.log('Courses data:', data); // Debug log

      // Ki·ªÉm tra c·∫•u tr√∫c data
      if (data && data.courses) {
        console.log('Found courses:', data.courses.length);
        return data.courses;
      } else if (data && Array.isArray(data)) {
        console.log('Data is array:', data.length);
        return data;
      } else {
        console.log('Unexpected data structure:', data);
        return [];
      }
    } catch (error) {
      console.error('Error fetching courses:', error);
      return [];
    }
  };

  const fetchAvailableTimeSlots = async (date) => {
    try {
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/consultation/checkAppointment`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ appointment_date: date })
      });
      const data = await response.json();
      return data.available_times || [];
    } catch (error) {
      console.error('Error fetching time slots:', error);
      return [];
    }
  };

  const bookAppointment = async (appointmentData) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/consultation/addAppointment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(appointmentData)
      });
      return await response.json();
    } catch (error) {
      console.error('Error booking appointment:', error);
      return { success: false, message: 'Booking failed' };
    }
  };

  // Component ƒë·ªÉ render message v·ªõi clickable links
  const MessageText = ({ text }) => {
    const renderTextWithLinks = (text) => {
      const urlRegex = /(https?:\/\/[^\s]+)/g;
      const parts = text.split(urlRegex);

      return parts.map((part, index) => {
        if (urlRegex.test(part)) {
          return (
            <a
              key={index}
              href={part}
              className="course-link"
              onClick={(e) => {
                e.preventDefault();

                // Ki·ªÉm tra n·∫øu l√† internal link
                if (part.includes(window.location.origin)) {
                  const url = new URL(part);
                  const path = url.pathname;
                  const search = url.search; // L·∫•y query params

                  // ƒêi·ªÅu h∆∞·ªõng v·ªõi c·∫£ path v√† search params
                  if (path.startsWith('/courses/') && path.split('/').length > 2) {
                    // ƒêi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp v·ªõi query params
                    navigate(path + search);
                  } else {
                    // ƒêi·ªÅu h∆∞·ªõng b√¨nh th∆∞·ªùng
                    navigate();


                  }
                } else {
                  // External link - m·ªü tab m·ªõi
                  window.open(part, '_blank');
                }
              }}
            >
              {part}
            </a>
          );
        }
        return part;
      });
    };

    return (
      <div className="message-text">
        {renderTextWithLinks(text)}
      </div>
    );
  };

  return (
    <div>
      {/* Chatbot Toggle Button */}
      <button className="chatbot-toggle" onClick={() => setIsOpen(!isOpen)}>
        {isOpen ? <CloseIcon className="w-6 h-6" /> : <ChatbotIcon className="w-6 h-6" />}
      </button>

      {/* Chatbot Window */}
      {isOpen && (
        <div className="chatbot-container">
          {/* Header */}
          <div className="chatbot-header">
            <div className="chatbot-header-left">
              <div className="chatbot-avatar">
                <RobotIcon className="w-5 h-5" />
              </div>
              <div className="chatbot-info">
                <h3>WeHope AI</h3>
                <span className="chatbot-status">{language === 'vi' ? 'ƒêang online' : 'Online'}</span>
              </div>
            </div>
            <div className="chatbot-header-right">
              <button
                className="language-toggle"
                onClick={toggleLanguage}
                title={language === 'vi' ? 'Chuy·ªÉn sang ti·∫øng Anh' : 'Switch to Vietnamese'}
              >
                <GlobeIcon className="w-3 h-3" />
                <span>{language === 'vi' ? 'EN' : 'VI'}</span>
              </button>
              <button
                className="close-button"
                onClick={() => setIsOpen(false)}
                title="Close"
              >
                <CloseIcon className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Messages Area */}
          <div className="chatbot-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
              >
                <div className="message-avatar">
                  {message.sender === 'user' ? 
                    <UserIcon className="w-4 h-4" /> : 
                    <RobotIcon className="w-4 h-4" />
                  }
                </div>
                <div className="message-content">
                  <MessageText text={message.text} />
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              </div>
            ))}
            {/* Typing Indicator */}

            {isTyping && (
              <div className="message bot-message">
                <div className="message-avatar">
                  <RobotIcon className="w-4 h-4" />
                </div>
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Quick Actions - Th√™m v√†o ph·∫ßn messages area, tr∆∞·ªõc input */}
          {messages.length <= 1 && (
            <div className="quick-actions">
              <h4>{language === 'en' ? 'Quick Actions:' : 'H√†nh ƒë·ªông nhanh:'}</h4>
              <div className="action-buttons">
                <button onClick={() => handleQuickAction('courses')}>
                  {language === 'en' ? 'üìö View Courses' : 'üìö Xem Kh√≥a h·ªçc'}
                </button>
                <button onClick={() => handleQuickAction('appointment')}>
                  {language === 'en' ? 'üìÖ Book Consultation' : 'üìÖ ƒê·∫∑t l·ªãch t∆∞ v·∫•n'}
                </button>
                <button onClick={() => handleQuickAction('survey')}>
                  {language === 'en' ? 'üìã Take Survey' : 'üìã L√†m kh·∫£o s√°t'}
                </button>
              </div>
            </div>
          )}

          {/* Input Area */}
          <div className="chatbot-input">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={language === 'vi' ? "Nh·∫≠p tin nh·∫Øn..." : "Type your message..."}
              disabled={isTyping}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="send-button"
            >
              <SendIcon className="w-4 h-4" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};


export default ConversationalChatbot;

export default Chatbot;

