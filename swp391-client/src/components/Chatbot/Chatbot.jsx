import React, { useState, useRef, useEffect } from 'react';
import { FaComments, FaTimes, FaPaperPlane, FaRobot, FaUser, FaGlobe } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import './Chatbot.css';

const Chatbot = () => {
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [language, setLanguage] = useState('en');
  const messagesEndRef = useRef(null);

  const [conversationContext, setConversationContext] = useState({
    waitingForDate: false,
    waitingForTime: false,
    selectedDate: null,
    availableSlots: [],
    action: null
  });

  const fallbackResponses = {
    en: {
      greetings: [
        "Hello! I'm here to help you with drug prevention and support. How can I assist you today?",
        "Hi there! Welcome to our drug prevention support system. What would you like to know?",
        "Greetings! I'm your AI assistant for drug prevention education. How can I help?"
      ],
      drug_info: [
        "Drugs can have serious effects on your health, relationships, and future. It's important to stay informed and make healthy choices.",
        "Understanding the risks of drug use is crucial. Drugs can affect your brain, body, and mental health in harmful ways.",
        "Drug prevention starts with education. Knowing the facts helps you make informed decisions about your health and well-being."
      ],
      support: [
        "If you or someone you know is struggling with drug use, there are many resources and people who want to help. You're not alone.",
        "Seeking help is a sign of strength, not weakness. Professional counselors and support groups are available to assist you.",
        "Remember, recovery is possible and there are many success stories. Don't hesitate to reach out for support."
      ],
      prevention: [
        "Prevention strategies include building strong relationships, developing healthy coping skills, and staying connected with supportive communities.",
        "Setting clear boundaries, practicing stress management, and having open communication with family and friends are key prevention tools.",
        "Education, awareness, and early intervention are the best ways to prevent drug use and promote healthy lifestyles."
      ],
      default: [
        "That's an interesting question about drug prevention. Let me help you find the information you need.",
        "I'm here to support you with drug prevention education. Could you tell me more about what you'd like to know?",
        "Thank you for reaching out. I'm dedicated to helping with drug prevention and support topics."
      ]
    },
    vi: {
      greetings: [
        "Xin ch√†o! T√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n v·ªÅ ph√≤ng ch·ªëng ma t√∫y v√† h·ªó tr·ª£. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n nh∆∞ th·∫ø n√†o h√¥m nay?",
        "Ch√†o b·∫°n! Ch√†o m·ª´ng ƒë·∫øn h·ªá th·ªëng h·ªó tr·ª£ ph√≤ng ch·ªëng ma t√∫y. B·∫°n mu·ªën bi·∫øt g√¨?",
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI cho gi√°o d·ª•c ph√≤ng ch·ªëng ma t√∫y. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"
      ],
      drug_info: [
        "Ma t√∫y c√≥ th·ªÉ g√¢y ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng ƒë·∫øn s·ª©c kh·ªèe, c√°c m·ªëi quan h·ªá v√† t∆∞∆°ng lai c·ªßa b·∫°n. Vi·ªác ƒë∆∞·ª£c th√¥ng tin v√† ƒë∆∞a ra l·ª±a ch·ªçn l√†nh m·∫°nh r·∫•t quan tr·ªçng.",
        "Hi·ªÉu bi·∫øt v·ªÅ r·ªßi ro c·ªßa vi·ªác s·ª≠ d·ª•ng ma t√∫y l√† r·∫•t quan tr·ªçng. Ma t√∫y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn n√£o, c∆° th·ªÉ v√† s·ª©c kh·ªèe t√¢m th·∫ßn theo nh·ªØng c√°ch c√≥ h·∫°i.",
        "Ph√≤ng ch·ªëng ma t√∫y b·∫Øt ƒë·∫ßu t·ª´ gi√°o d·ª•c. Bi·∫øt ƒë∆∞·ª£c c√°c s·ª± th·∫≠t gi√∫p b·∫°n ƒë∆∞a ra quy·∫øt ƒë·ªãnh s√°ng su·ªët v·ªÅ s·ª©c kh·ªèe v√† h·∫°nh ph√∫c c·ªßa m√¨nh."
      ],
      support: [
        "N·∫øu b·∫°n ho·∫∑c ai ƒë√≥ b·∫°n bi·∫øt ƒëang g·∫∑p kh√≥ khƒÉn v·ªõi vi·ªác s·ª≠ d·ª•ng ma t√∫y, c√≥ nhi·ªÅu ngu·ªìn l·ª±c v√† ng∆∞·ªùi mu·ªën gi√∫p ƒë·ª°. B·∫°n kh√¥ng ƒë∆°n ƒë·ªôc.",
        "T√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° l√† d·∫•u hi·ªáu c·ªßa s·ª©c m·∫°nh, kh√¥ng ph·∫£i y·∫øu ƒëu·ªëi. C√°c chuy√™n gia t∆∞ v·∫•n v√† nh√≥m h·ªó tr·ª£ c√≥ s·∫µn ƒë·ªÉ h·ªó tr·ª£ b·∫°n.",
        "H√£y nh·ªõ r·∫±ng, ph·ª•c h·ªìi l√† c√≥ th·ªÉ v√† c√≥ nhi·ªÅu c√¢u chuy·ªán th√†nh c√¥ng. ƒê·ª´ng ng·∫ßn ng·∫°i t√¨m ki·∫øm s·ª± h·ªó tr·ª£."
      ],
      prevention: [
        "C√°c chi·∫øn l∆∞·ª£c ph√≤ng ng·ª´a bao g·ªìm x√¢y d·ª±ng c√°c m·ªëi quan h·ªá m·∫°nh m·∫Ω, ph√°t tri·ªÉn k·ªπ nƒÉng ƒë·ªëi ph√≥ l√†nh m·∫°nh v√† duy tr√¨ k·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng h·ªó tr·ª£.",
        "Thi·∫øt l·∫≠p ranh gi·ªõi r√µ r√†ng, th·ª±c h√†nh qu·∫£n l√Ω cƒÉng th·∫≥ng v√† c√≥ giao ti·∫øp c·ªüi m·ªü v·ªõi gia ƒë√¨nh v√† b·∫°n b√® l√† nh·ªØng c√¥ng c·ª• ph√≤ng ng·ª´a ch√≠nh.",
        "Gi√°o d·ª•c, awareness v√† can thi·ªáp s·ªõm l√† nh·ªØng c√°ch t·ªët nh·∫•t ƒë·ªÉ ngƒÉn ch·∫∑n vi·ªác s·ª≠ d·ª•ng ma t√∫y v√† th√∫c ƒë·∫©y l·ªëi s·ªëng l√†nh m·∫°nh."
      ],
      default: [
        "ƒê√≥ l√† m·ªôt c√¢u h·ªèi th√∫ v·ªã v·ªÅ ph√≤ng ch·ªëng ma t√∫y. H√£y ƒë·ªÉ t√¥i gi√∫p b·∫°n t√¨m th√¥ng tin b·∫°n c·∫ßn.",
        "T√¥i ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi gi√°o d·ª•c ph√≤ng ch·ªëng ma t√∫y. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m v·ªÅ nh·ªØng g√¨ b·∫°n mu·ªën bi·∫øt kh√¥ng?",
        "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. T√¥i t·∫≠n t√¢m gi√∫p ƒë·ª° v·ªõi c√°c ch·ªß ƒë·ªÅ ph√≤ng ch·ªëng ma t√∫y v√† h·ªó tr·ª£."
      ]
    }
  };

  // Welcome message
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMsg = {
        id: 1,
        text: fallbackResponses[language].greetings[Math.floor(Math.random() * fallbackResponses[language].greetings.length)],
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages([welcomeMsg]);
    }
  }, [isOpen, language]);

  // Auto scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const getAIResponse = async (userMessage) => {
    const lowerMsg = userMessage.toLowerCase();

    // 1. Course-related queries
    if (lowerMsg.includes('course') || lowerMsg.includes('kh√≥a h·ªçc') || lowerMsg.includes('courses')) {
      try {
        const courses = await fetchCourses();
        if (courses.length > 0) {
          const courseList = courses.slice(0, 3).map(course => {
            const courseName = course.course_name || course.title;
            const ageGroup = course.age_group || 'All ages';
            return `‚Ä¢ ${courseName} (${ageGroup})`;
          }).join('\n');

          const coursesUrl = `${window.location.origin}/courses`;

          return language === 'en'
            ? `Here are some available courses:\n\n${courseList}\n\nüîó View all courses: ${coursesUrl}\n\nVisit our Courses page to explore details and enroll.`
            : `ƒê√¢y l√† m·ªôt s·ªë kh√≥a h·ªçc c√≥ s·∫µn:\n\n${courseList}\n\nüîó Xem t·∫•t c·∫£ kh√≥a h·ªçc: ${coursesUrl}\n\nTruy c·∫≠p trang Kh√≥a h·ªçc ƒë·ªÉ kh√°m ph√° chi ti·∫øt v√† ƒëƒÉng k√Ω.`;
        }
      } catch (error) {
        const coursesUrl = `${window.location.origin}/courses`;
        return language === 'en'
          ? `I can help you find courses about drug prevention.\n\nüîó Visit our Courses page: ${coursesUrl}`
          : `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m kh√≥a h·ªçc v·ªÅ ph√≤ng ch·ªëng ma t√∫y.\n\nüîó Truy c·∫≠p trang Kh√≥a h·ªçc: ${coursesUrl}`;
      }
    }

    // 2. Appointment booking
    if (lowerMsg.includes('appointment') || lowerMsg.includes('book') || lowerMsg.includes('ƒë·∫∑t l·ªãch') || lowerMsg.includes('t∆∞ v·∫•n') || lowerMsg.includes('consultation')) {
      console.log('User wants to book an appointment'); // Debug log
      // N·∫øu ƒëang ƒë·ª£i user nh·∫≠p ng√†y
      console.log('Already waiting for date input:', conversationContext.waitingForDate); // Debug log
      if (conversationContext.waitingForDate) {
        console.log('Processing date input:', userMessage); // Debug log

        const dateMatch = userMessage.match(
          /(\d{1,2})[\/\-\.](\d{1,2})[\/\-\.](\d{2,4})|(\d{2,4})[\/\-\.](\d{1,2})[\/\-\.](\d{1,2})/
        );
        const todayMatch = lowerMsg.includes('today') || lowerMsg.includes('h√¥m nay');
        const tomorrowMatch = lowerMsg.includes('tomorrow') || lowerMsg.includes('ng√†y mai');

        let selectedDate = null;

        if (todayMatch) {
          const today = new Date();
          const year = today.getFullYear();
          const month = String(today.getMonth() + 1).padStart(2, '0');
          const day = String(today.getDate()).padStart(2, '0');
          selectedDate = `${year}-${month}-${day}`;
          console.log('‚úÖ Today formatted:', selectedDate);
        } else if (tomorrowMatch) {
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate() + 1);
          const year = tomorrow.getFullYear();
          const month = String(tomorrow.getMonth() + 1).padStart(2, '0');
          const day = String(tomorrow.getDate()).padStart(2, '0');
          selectedDate = `${year}-${month}-${day}`;
          console.log('‚úÖ Tomorrow formatted:', selectedDate);
        } else if (dateMatch) {
          // Parse date t·ª´ input v·ªõi validation t·ªët h∆°n
          const [full, d1, m1, y1, y2, m2, d2] = dateMatch;
          const day = String(d1 || d2).padStart(2, '0');
          const month = String(m1 || m2).padStart(2, '0');
          const year = y1 || y2;

          if (year < 2024 || year > 2030) {
            return language === 'en'
              ? "‚ùå Please provide a valid year (2024-2030)."
              : "‚ùå Vui l√≤ng cung c·∫•p nƒÉm h·ª£p l·ªá (2024-2030).";
          }

          selectedDate = `${year}-${month}-${day}`;
          console.log('‚úÖ Custom date formatted:', selectedDate);
        }

        if (!selectedDate || selectedDate.includes('undefined') || selectedDate.includes('NaN')) {
          console.log('‚ùå Invalid date format:', selectedDate);
          return language === 'en'
            ? "‚ùå Invalid date format. Please try again with format DD/MM/YYYY or say 'today'/'tomorrow'."
            : "‚ùå ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng DD/MM/YYYY ho·∫∑c n√≥i 'h√¥m nay'/'ng√†y mai'.";
        }

        if (selectedDate) {
          try {
            const userData = localStorage.getItem('user');
            console.log('Raw user data from localStorage:', userData);

            if (!userData) {
              console.log('‚ùå No user data in localStorage');
              setConversationContext({
                waitingForDate: false,
                waitingForTime: false,
                selectedDate: null,
                availableSlots: [],
                action: null
              });

              return language === 'en'
                ? "‚ùå Please log in first to check appointment availability."
                : "‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc ƒë·ªÉ ki·ªÉm tra l·ªãch h·∫πn.";
            }

            const user = JSON.parse(userData);
            console.log('Parsed user object:', user);

            const memberId = user.user_id || user.id || user.userId || user.member_id;
            console.log('Found member ID:', memberId);

            if (!memberId) {
              console.log('‚ùå No member ID found in user object');
              setConversationContext({
                waitingForDate: false,
                waitingForTime: false,
                selectedDate: null,
                availableSlots: [],
                action: null
              });

              return language === 'en'
                ? "‚ùå User ID not found. Please log in again."
                : "‚ùå Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
            }

            console.log('‚úÖ Using member ID:', memberId, 'for date:', selectedDate);

            const availableSlots = await checkAvailableSlots(memberId, selectedDate);

            console.log('Available slots found:', availableSlots);

            if (availableSlots.length > 0) {
              setConversationContext({
                waitingForDate: false,
                waitingForTime: true,
                selectedDate: selectedDate,
                availableSlots: availableSlots,
                action: 'booking_time'
              });

              const slotsList = availableSlots.map(slot => `‚Ä¢ ${slot}`).join('\n');

              return language === 'en'
                ? `Available time slots for ${selectedDate}:\n\n${slotsList}\n\nPlease choose your preferred time slot.`
                : `C√°c khung gi·ªù tr·ªëng cho ng√†y ${selectedDate}:\n\n${slotsList}\n\nVui l√≤ng ch·ªçn khung gi·ªù b·∫°n mu·ªën.`;
            } else {
              setConversationContext({
                waitingForDate: false,
                waitingForTime: false,
                selectedDate: null,
                availableSlots: [],
                action: null
              });

              return language === 'en'
                ? `No available slots for ${selectedDate}. Please try another date or visit our Consultation page.`
                : `Kh√¥ng c√≥ khung gi·ªù tr·ªëng cho ng√†y ${selectedDate}. Vui l√≤ng th·ª≠ ng√†y kh√°c ho·∫∑c truy c·∫≠p trang T∆∞ v·∫•n.`;
            }
          } catch (error) {
            console.error('Error checking availability:', error);
            setConversationContext({
              waitingForDate: false,
              waitingForTime: false,
              selectedDate: null,
              availableSlots: [],
              action: null
            });

            return language === 'en'
              ? "Sorry, I couldn't check availability right now. Please visit our Consultation page."
              : "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ki·ªÉm tra l·ªãch tr·ªëng ngay b√¢y gi·ªù. Vui l√≤ng truy c·∫≠p trang T∆∞ v·∫•n.";
          }
        } else {
          return language === 'en'
            ? "Please provide a valid date (e.g., 25/12/2024, today, tomorrow)."
            : "Vui l√≤ng cung c·∫•p ng√†y h·ª£p l·ªá (v√≠ d·ª•: 25/12/2024, h√¥m nay, ng√†y mai).";
        }
      }

      if (conversationContext.waitingForTime) {
        const timeInput = userMessage.trim();
        console.log('Processing time input:', timeInput);
        console.log('Available slots:', conversationContext.availableSlots);

        const matchedSlot = conversationContext.availableSlots.find(slot =>
          timeInput.includes(slot) || slot.includes(timeInput)
        );

        if (matchedSlot) {
          try {
            const user = JSON.parse(localStorage.getItem('user') || '{}');
            const memberId = user.user_id || user.id;

            console.log('Booking appointment:', {
              memberId,
              date: conversationContext.selectedDate,
              time: matchedSlot
            });

            const bookingResult = await bookSpecificAppointment(
              memberId,
              conversationContext.selectedDate,
              matchedSlot
            );

            setConversationContext({
              waitingForDate: false,
              waitingForTime: false,
              selectedDate: null,
              availableSlots: [],
              action: null
            });

            if (bookingResult.success) {
              return language === 'en'
                ? `‚úÖ Appointment booked successfully!\n\nDate: ${conversationContext.selectedDate}\nTime: ${matchedSlot}\n\nYou'll receive a confirmation email shortly.`
                : `‚úÖ ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng!\n\nNg√†y: ${conversationContext.selectedDate}\nGi·ªù: ${matchedSlot}\n\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n s·ªõm.`;
            } else {
              return language === 'en'
                ? `‚ùå Booking failed. The time slot might be taken. Please try again.`
                : `‚ùå ƒê·∫∑t l·ªãch th·∫•t b·∫°i. Khung gi·ªù c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i.`;
            }
          } catch (error) {
            console.error('Booking error:', error);
            setConversationContext({
              waitingForDate: false,
              waitingForTime: false,
              selectedDate: null,
              availableSlots: [],
              action: null
            });

            return language === 'en'
              ? "Booking failed. Please visit our Consultation page to book directly."
              : "ƒê·∫∑t l·ªãch th·∫•t b·∫°i. Vui l√≤ng truy c·∫≠p trang T∆∞ v·∫•n ƒë·ªÉ ƒë·∫∑t tr·ª±c ti·∫øp.";
          }
        } else {
          const slotsList = conversationContext.availableSlots.map(slot => `‚Ä¢ ${slot}`).join('\n');
          return language === 'en'
            ? `Please choose from these available time slots:\n\n${slotsList}`
            : `Vui l√≤ng ch·ªçn t·ª´ c√°c khung gi·ªù tr·ªëng sau:\n\n${slotsList}`;
        }
      }

      setConversationContext({
        waitingForDate: true,
        action: 'booking_date',
        waitingForTime: false,
        selectedDate: null,
        availableSlots: []
      });

      return language === 'en'
        ? "I can help you book a consultation appointment.\n\nPlease tell me your preferred date (e.g., 25/12/2024, today, tomorrow)."
        : "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t l·ªãch t∆∞ v·∫•n.\n\nVui l√≤ng cho t√¥i bi·∫øt ng√†y b·∫°n mu·ªën (v√≠ d·ª•: 25/12/2024, h√¥m nay, ng√†y mai).";
    }

    // 3. Specific course info
    if (lowerMsg.includes('teenager') || lowerMsg.includes('young adult') || lowerMsg.includes('adult') ||
      lowerMsg.includes('thanh thi·∫øu ni√™n') || lowerMsg.includes('ng∆∞·ªùi tr·∫ª') || lowerMsg.includes('ng∆∞·ªùi l·ªõn')) {
      try {
        const courses = await fetchCourses();
        const ageGroup = lowerMsg.includes('teenager') || lowerMsg.includes('thanh thi·∫øu ni√™n') ? 'Teenagers' :
          lowerMsg.includes('young') || lowerMsg.includes('ng∆∞·ªùi tr·∫ª') ? 'Young Adult' : 'Adult';

        const filteredCourses = courses.filter(course => course.age_group === ageGroup);

        if (filteredCourses.length > 0) {
          const courseList = filteredCourses.slice(0, 2).map(course => {
            const courseId = course.course_id || course.id;
            const courseName = course.course_name || course.title;
            const courseUrl = `${window.location.origin}/courses/${courseId}`;

            return `‚Ä¢ ${courseName}\n  üîó ${courseUrl}`;
          }).join('\n\n');

          return language === 'en'
            ? `Courses for ${ageGroup}:\n\n${courseList}\n\nThese courses are specifically designed for your age group with relevant content and examples.`
            : `Kh√≥a h·ªçc cho ${ageGroup === 'Teenagers' ? 'thanh thi·∫øu ni√™n' : ageGroup === 'Young Adult' ? 'ng∆∞·ªùi tr·∫ª' : 'ng∆∞·ªùi l·ªõn'}:\n\n${courseList}\n\nC√°c kh√≥a h·ªçc n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho ƒë·ªô tu·ªïi c·ªßa b·∫°n v·ªõi n·ªôi dung v√† v√≠ d·ª• ph√π h·ª£p.`;
        }
      } catch (error) {
        // Fallback to default response
      }
    }

    // 4. Help with navigation
    if (lowerMsg.includes('how to') || lowerMsg.includes('navigate') || lowerMsg.includes('l√†m th·∫ø n√†o')) {
      return language === 'en'
        ? "I can help you navigate our system:\n‚Ä¢ Take surveys to assess your knowledge\n‚Ä¢ Browse educational courses\n‚Ä¢ Book consultation appointments\n‚Ä¢ Read latest news and blogs\n\nWhat would you like to do first?"
        : "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n s·ª≠ d·ª•ng h·ªá th·ªëng:\n‚Ä¢ L√†m kh·∫£o s√°t ƒë·ªÉ ƒë√°nh gi√° ki·∫øn th·ª©c\n‚Ä¢ Xem c√°c kh√≥a h·ªçc gi√°o d·ª•c\n‚Ä¢ ƒê·∫∑t l·ªãch t∆∞ v·∫•n\n‚Ä¢ ƒê·ªçc tin t·ª©c v√† blog m·ªõi nh·∫•t\n\nB·∫°n mu·ªën l√†m g√¨ tr∆∞·ªõc?";
    }

    // 5. Continue with existing project features...
    if (lowerMsg.includes('survey') || lowerMsg.includes('kh·∫£o s√°t')) {
      return language === 'en'
        ? "Our survey feature helps you assess your knowledge and risk factors related to drug use. It's completely anonymous and provides personalized recommendations. Would you like me to guide you to the survey page?"
        : "Ch·ª©c nƒÉng kh·∫£o s√°t gi√∫p b·∫°n ƒë√°nh gi√° ki·∫øn th·ª©c v√† y·∫øu t·ªë nguy c∆° li√™n quan ƒë·∫øn ma t√∫y. Ho√†n to√†n ·∫©n danh v√† cung c·∫•p khuy·∫øn ngh·ªã c√° nh√¢n h√≥a. B·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n ƒë·∫øn trang kh·∫£o s√°t kh√¥ng?";
    }

    // 6. Continue with Gemini AI for general drug prevention questions...
    try {
      const systemPrompt = language === 'en'
        ? `You are WeHope AI Assistant with access to real-time system data. You can help users with:

SYSTEM CAPABILITIES:
- Course information: We have courses for different age groups (Teenagers, Young Adults, Adults)
- Appointment booking: Users can schedule consultations with experts
- Survey system: Anonymous assessments with personalized feedback
- Educational resources: Latest news, blogs, and prevention materials

REAL-TIME FEATURES:
- Check available consultation time slots
- Browse course catalog by age group
- Access survey results and recommendations
- Get latest updates on drug prevention

Answer questions about drug prevention, our system features, and guide users to relevant pages. Keep responses helpful and under 150 words.

USER QUESTION: `
        : `B·∫°n l√† WeHope AI Assistant c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu h·ªá th·ªëng th·ªùi gian th·ª±c. B·∫°n c√≥ th·ªÉ gi√∫p ng∆∞·ªùi d√πng:

KH·∫¢ NƒÇNG H·ªÜ TH·ªêNG:
- Th√¥ng tin kh√≥a h·ªçc: Ch√∫ng t√¥i c√≥ kh√≥a h·ªçc cho c√°c nh√≥m tu·ªïi kh√°c nhau (Thanh thi·∫øu ni√™n, Ng∆∞·ªùi tr·∫ª, Ng∆∞·ªùi l·ªõn)
- ƒê·∫∑t l·ªãch h·∫πn: Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n v·ªõi chuy√™n gia
- H·ªá th·ªëng kh·∫£o s√°t: ƒê√°nh gi√° ·∫©n danh v·ªõi ph·∫£n h·ªìi c√° nh√¢n h√≥a
- T√†i nguy√™n gi√°o d·ª•c: Tin t·ª©c, blog v√† t√†i li·ªáu ph√≤ng ng·ª´a m·ªõi nh·∫•t

T√çNH NƒÇNG TH·ªúI GIAN TH·ª∞C:
- Ki·ªÉm tra khung gi·ªù t∆∞ v·∫•n c√≥ s·∫µn
- Xem danh m·ª•c kh√≥a h·ªçc theo nh√≥m tu·ªïi
- Truy c·∫≠p k·∫øt qu·∫£ kh·∫£o s√°t v√† khuy·∫øn ngh·ªã
- Nh·∫≠n c·∫≠p nh·∫≠t m·ªõi nh·∫•t v·ªÅ ph√≤ng ch·ªëng ma t√∫y

Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ ph√≤ng ch·ªëng ma t√∫y, t√≠nh nƒÉng h·ªá th·ªëng v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ƒë·∫øn trang ph√π h·ª£p. Gi·ªØ c√¢u tr·∫£ l·ªùi h·ªØu √≠ch v√† d∆∞·ªõi 150 t·ª´.

C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG: `;

      // Continue with Gemini API call...
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${import.meta.env.VITE_GEMINI_API_KEY}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: systemPrompt + userMessage }] }],
          generationConfig: {
            maxOutputTokens: 150,
            temperature: 0.7,
            topP: 0.8,
            topK: 40
          },
          safetySettings: [
            { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
            { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
            { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
            { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" }
          ]
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
          return data.candidates[0].content.parts[0].text.trim();
        }
      }
    } catch (error) {
      console.log('Gemini AI Error:', error.message);
    }

    // Fallback responses...
    const responses = fallbackResponses[language];
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('xin ch√†o')) {
      return responses.greetings[Math.floor(Math.random() * responses.greetings.length)];
    }

    return responses.default[Math.floor(Math.random() * responses.default.length)];
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      text: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    try {
      const aiResponseText = await getAIResponse(inputMessage);

      const aiResponse = {
        id: messages.length + 2,
        text: aiResponseText,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('Error getting AI response:', error);

      // Fallback response n·∫øu c√≥ l·ªói
      const fallbackText = language === 'en'
        ? "I'm having trouble connecting to my AI service right now. Please try again in a moment, or feel free to ask me about drug prevention topics."
        : "T√¥i ƒëang g·∫∑p kh√≥ khƒÉn k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau, ho·∫∑c h·ªèi t√¥i v·ªÅ c√°c ch·ªß ƒë·ªÅ ph√≤ng ch·ªëng ma t√∫y.";

      const fallbackResponse = {
        id: messages.length + 2,
        text: fallbackText,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, fallbackResponse]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleLanguage = () => {
    setLanguage(language === 'en' ? 'vi' : 'en');
    setMessages([]); // Clear messages when changing language
  };

  const handleQuickAction = (action) => {
    const actionMessages = {
      courses: language === 'en' ? 'Show me available courses' : 'Hi·ªÉn th·ªã c√°c kh√≥a h·ªçc c√≥ s·∫µn',
      appointment: language === 'en' ? 'I want to book a consultation' : 'T√¥i mu·ªën ƒë·∫∑t l·ªãch t∆∞ v·∫•n',
      survey: language === 'en' ? 'Tell me about the survey' : 'Cho t√¥i bi·∫øt v·ªÅ kh·∫£o s√°t'
    };

    setInputMessage(actionMessages[action]);
    handleSendMessage();
  };

  // API functions
  const fetchCourses = async () => {
    try {
      console.log('Fetching courses from:', `${import.meta.env.VITE_API_URL}/course/get-all-course`);
      const response = await fetch(`${import.meta.env.VITE_API_URL}/course/get-all-course`);
      console.log('Response status:', response.status);

      const data = await response.json();
      console.log('Courses data:', data); // Debug log

      // Ki·ªÉm tra c·∫•u tr√∫c data
      if (data && data.courses) {
        console.log('Found courses:', data.courses.length);
        return data.courses;
      } else if (data && Array.isArray(data)) {
        console.log('Data is array:', data.length);
        return data;
      } else {
        console.log('Unexpected data structure:', data);
        return [];
      }
    } catch (error) {
      console.error('Error fetching courses:', error);
      return [];
    }
  };

  const fetchAvailableTimeSlots = async (date) => {
    try {
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/consultation/checkAppointment`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ appointment_date: date })
      });
      const data = await response.json();
      return data.available_times || [];
    } catch (error) {
      console.error('Error fetching time slots:', error);
      return [];
    }
  };

  const bookAppointment = async (appointmentData) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/consultation/addAppointment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(appointmentData)
      });
      return await response.json();
    } catch (error) {
      console.error('Error booking appointment:', error);
      return { success: false, message: 'Booking failed' };
    }
  };

  const checkAvailableSlots = async (memberId, date) => {
    try {
      console.log('=== CHECKING AVAILABLE SLOTS ===');
      console.log('Member ID:', memberId, '(type:', typeof memberId, ')');
      console.log('Date:', date, '(type:', typeof date, ')');
      console.log('Base API URL:', import.meta.env.VITE_API_URL);

      // S·ª¨A: Ki·ªÉm tra input parameters
      if (!memberId || memberId === 'undefined' || memberId === undefined) {
        console.error('‚ùå Invalid member ID:', memberId);
        return [];
      }

      if (!date || date === 'undefined' || date === undefined || date.includes('undefined')) {
        console.error('‚ùå Invalid date:', date);
        return [];
      }

      const timeSlots = [
        '08:00', '08:30', '09:00', '09:30', '10:00', '10:30',
        '11:00', '11:30', '13:00', '13:30', '14:00', '14:30',
        '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'
      ];

      const availableSlots = [];

      for (const time of timeSlots) {
        try {
          console.log(`\n--- Checking slot: ${time} ---`);
          const url = `${import.meta.env.VITE_API_URL}/consultation/check-appointment/${memberId}/${date}/${time}`;
          console.log('Full URL:', url);

          if (url.includes('undefined')) {
            console.error('‚ùå URL contains undefined:', url);
            continue;
          }

          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
          });

          console.log(`Response status for ${time}:`, response.status);
          console.log(`Response ok for ${time}:`, response.ok);

          if (!response.ok) {
            console.log(`‚ùå HTTP error for ${time}:`, response.status, response.statusText);
            continue;
          }

          const data = await response.json();
          console.log(`‚úÖ Response data for ${time}:`, data);

          // Ki·ªÉm tra theo format: {status: 'success', booked: false}
          if (data.status === 'success' && data.booked === false) {
            availableSlots.push(time);
            console.log(`üü¢ Slot ${time} is AVAILABLE`);
          } else {
            console.log(`üî¥ Slot ${time} is NOT AVAILABLE - Status: ${data.status}, Booked: ${data.booked}`);
          }

        } catch (error) {
          console.error(`üí• Error checking slot ${time}:`, error);
        }
      }

      console.log('\n=== FINAL RESULT ===');
      console.log('Available slots found:', availableSlots);
      console.log('Total available slots:', availableSlots.length);
      console.log('====================\n');

      return availableSlots;

    } catch (error) {
      console.error('üí• Error in checkAvailableSlots:', error);
      return [];
    }
  };

  const bookSpecificAppointment = async (memberId, date, time) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/consultation/addAppointment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          member_id: memberId,
          appointment_date: date,
          appointment_time: time
        })
      });

      const data = await response.json();
      return { success: response.ok, data };
    } catch (error) {
      console.error('Error booking appointment:', error);
      return { success: false, message: 'Booking failed' };
    }
  };

  const MessageText = ({ text }) => {
    const renderTextWithLinks = (text) => {
      const urlRegex = /(https?:\/\/[^\s]+)/g;
      const parts = text.split(urlRegex);

      return parts.map((part, index) => {
        if (urlRegex.test(part)) {
          return (
            <a
              key={index}
              href={part}
              className="course-link"
              onClick={(e) => {
                e.preventDefault();

                if (part.includes(window.location.origin)) {
                  const url = new URL(part);
                  const path = url.pathname;
                  navigate(path); // ƒêi·ªÅu h∆∞·ªõng ƒë∆°n gi·∫£n
                } else {
                  window.open(part, '_blank');
                }
              }}
            >
              {part}
            </a>
          );
        }
        return part;
      });
    };

    return (
      <div className="message-text">
        {renderTextWithLinks(text)}
      </div>
    );
  };

  return (
    <>
      {/* Chatbot Toggle Button */}
      <div className="chatbot-toggle" onClick={() => setIsOpen(!isOpen)}>
        {isOpen ? <FaTimes /> : <FaComments />}
      </div>

      {/* Chatbot Window */}
      {isOpen && (
        <div className="chatbot-container">
          {/* Header */}
          <div className="chatbot-header">
            <div className="chatbot-header-left">
              <div className="chatbot-avatar">
                <FaRobot />
              </div>
              <div className="chatbot-info">
                <h3>WeHope AI Assistant</h3>
                <span className="chatbot-status">Online</span>
              </div>
            </div>
            <div className="chatbot-header-right">
              <button
                className="language-toggle"
                onClick={toggleLanguage}
                title={language === 'en' ? 'Switch to Vietnamese' : 'Chuy·ªÉn sang ti·∫øng Anh'}
              >
                <FaGlobe />
                <span>{language === 'en' ? 'VI' : 'EN'}</span>
              </button>
              <button
                className="close-button"
                onClick={() => setIsOpen(false)}
                title="Close"
              >
                <FaTimes />
              </button>
            </div>
          </div>

          {/* Messages Area */}
          <div className="chatbot-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
              >
                <div className="message-avatar">
                  {message.sender === 'user' ? <FaUser /> : <FaRobot />}
                </div>
                <div className="message-content">
                  <MessageText text={message.text} />
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="message bot-message">
                <div className="message-avatar">
                  <FaRobot />
                </div>
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {messages.length <= 1 && (
            <div className="quick-actions">
              <h4>{language === 'en' ? 'Quick Actions:' : 'H√†nh ƒë·ªông nhanh:'}</h4>
              <div className="action-buttons">
                <button onClick={() => handleQuickAction('courses')}>
                  {language === 'en' ? 'üìö View Courses' : 'üìö Xem Kh√≥a h·ªçc'}
                </button>
                <button onClick={() => handleQuickAction('appointment')}>
                  {language === 'en' ? 'üìÖ Book Consultation' : 'üìÖ ƒê·∫∑t l·ªãch t∆∞ v·∫•n'}
                </button>
                <button onClick={() => handleQuickAction('survey')}>
                  {language === 'en' ? 'üìã Take Survey' : 'üìã L√†m kh·∫£o s√°t'}
                </button>
              </div>
            </div>
          )}

          {/* Input Area */}
          <div className="chatbot-input">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={language === 'en' ? "Type your message..." : "Nh·∫≠p tin nh·∫Øn..."}
              disabled={isTyping}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="send-button"
            >
              <FaPaperPlane />
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default Chatbot;